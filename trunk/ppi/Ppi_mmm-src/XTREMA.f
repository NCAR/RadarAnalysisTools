c
c----------------------------------------------------------------------X
c
      SUBROUTINE XTREMA(DAT,IOUT,IIN1,C1,C2,C3,BDVAL,MNGATE,MXGATE,
     X                  NANG,AZA,ELA,ITPOLD,X0,Y0,H0,R0,DROLD,NAMFLD,
     X                  GXMIN,GXMAX,GYMIN,GYMAX,TMP1,TMP2,MXR,MXA,MXF)
C
C     THIS ROUTINE FINDS RELATIVE MINIMA AND MAXIMA.  A RELATIVE MINIMUM
C     (OR MAXIMUM) IS DEFINED TO BE THE LOWEST (OR HIGHEST) POINT WITHIN
C     A CERTAIN NEIGHBORHOOD OF THE POINT.  THE NEIGHBORHOOD USED HERE
C     IS (+/-)MN IN THE RANGE DIRECTION AND (+/-)NM IN THE ANGLE DIRECTION.
C
C     THIS ALGORITHM WAS ORIGINALLY DEVISED BY DAVID KENNISON (SCD) AND
C     IS CONTAINED IN THE SYSTEM LIBRARY MINMAX, PART OF THE CONTOURING.
C
C     AZA,ELA     - AZIMUTH AND ELEVATION ANGLES OF RADAR BEAMS
C     ITPOLD      - SCANNING MODE [RHI (3): AZA CONTAINS ELEVATION ANGLE;
C                                           ELA     "     AZIMUTH    "  ]
C     R0,DROLD    - INITIAL RANGE (KM) AND GATE SPACING

C     IOUT   - OUTPUT FIELD NUMBER
C     IIN1   -  INPUT   "      "
C     TMP2   - TEMPORARY STORAGE ARRAY
C     IWIN   - SMALLEST NEIGHBORHOOD IN RANGE DIRECTION
C     JWIN   -     "          "       " ANGLE     "
C     FRACT  - FRACTION OF TOTAL (RANGE,ANGLE) TO BE USED IN
C              DETERMINING APPROPRIATE NEIGHBORHOOD FOR EXTREMA
C
      DIMENSION TMP1(MXR),TMP2(MXR,MXA)
      CHARACTER*8 NAMFLD(MXF)
      DIMENSION DAT(MXR,MXA,MXF),AZA(MXA,2),ELA(MXA,2)
      DIMENSION GXMIN(8),GXMAX(8),GYMIN(8),GYMAX(8)
      DATA IWIN,JWIN,FRACT/10,10,0.1/
      DATA RE,REI/17000.0,1.17647E-04/
      DATA TORAD,TODEG/0.017453293,57.29577951/
      DATA PI,PI2,PI4/3.141592654,6.283185307,12.56637061/

      IF(C1.NE.0.0)IWIN=NINT(C1)
      IF(C2.NE.0.0)JWIN=NINT(C2)
      IF(C3.NE.0.0)FRACT=C3

      GXMN=GXMIN(ITPOLD)+2.0*DROLD
      GXMX=GXMAX(ITPOLD)-2.0*DROLD
      GYMN=GYMIN(ITPOLD)+2.0*DROLD
      GYMX=GYMAX(ITPOLD)-2.0*DROLD

      M = MXGATE
      N = NANG
      MN = MIN0(IWIN,MAX0(2,NINT(FRACT*M)))
      NM = MIN0(JWIN,MAX0(2,NINT(FRACT*N)))
      MM1 = M-1
      NM1 = N-1

      DO 20 J=1,NANG
         DO 10 I=MNGATE,MXGATE
            IF(DAT(I,J,IIN1).EQ.BDVAL)THEN
               TMP2(I,J)=BDVAL
            ELSE
               TMP2(I,J)=0.0
            END IF
   10    CONTINUE
   20 CONTINUE

C     LINE LOOP FOLLOWS: THE COMPLETE TWO-DIMENSIONAL TEST FOR A MINIMUM OR
C     MAXIMUM OF THE FIELD IS ONLY PERFORMED FOR POINTS WHICH ARE MINIMA OR
C     MAXIMA ALONG A LINE.  FINDING THESE CANDIDATES IS MADE EFFICIENT BY
C     USING A COUNT OF CONSECUTIVE INCREASES OR DECREASES OF THE FUNCTION
C     ALONG THE LINE.
C
      DO 127 JP=2,NM1
         IM = MN-1
         IP = MNGATE-2
         GO TO 126

C        CONTROL RETURNS TO STATEMENT 101 AS LONG AS THE FUNCTION IS
C        INCREASING ALONG THE LINE.  WE ARE SEEKING A POSSIBLE MAXIMUM.
C
  101    IP = IP+1
         AA = AN
         IF (IP .EQ. MM1) GO TO 104
         AN = DAT(IP+1,JP,IIN1)
         IF (AN .EQ. BDVAL) GO TO 125
         IF (AA-AN) 102,103,104
  102    IM = IM+1
         GO TO 101
  103    IM = 0
         GO TO 101

C        FUNCTION DECREASED - TEST FOR MAXIMUM ON THE LINE.
C
  104    IF (IM .GE. MN) GO TO 106
         IS = MAX0(1,IP-MN)
         IT = IP-IM-1
         IF (IS .GT. IT) GO TO 106
         DO 105 II=IS,IT
            IF (AA .LE. DAT(II,JP,IIN1)) GO TO 112
  105    CONTINUE
  106    IS = IP+2
         IT = MIN0(M,IP+MN)
         IF (IS .GT. IT) GO TO 109
         DO 108 II=IS,IT
            IF (DAT(II,JP,IIN1) .NE. BDVAL) GO TO 107
            IP = II-1
            GO TO 125
  107       IF (AA .LE. DAT(II,JP,IIN1)) GO TO 112
  108    CONTINUE

C        MAXIMUM ON THE LINE. DO TWO-DIMENSIONAL TEST FOR MAXIMUM OF
C        THE FIELD.  IF A 2D MAXIMUM IS VERIFIED, STORE (+1) IN OUTPUT.
C
  109    JS = MAX0(1,JP-NM)
         JT = MIN0(N,JP+NM)
         IS = MAX0(1,IP-MN)
         IT = MIN0(M,IP+MN)
         DO 111 JK=JS,JT
            IF (JK .EQ. JP) GO TO 111
            DO 110 IK=IS,IT
               IF (DAT(IK,JK,IIN1) .GE. AA .OR.
     +             DAT(IK,JK,IIN1) .EQ. BDVAL) GO TO 112
  110       CONTINUE
  111    CONTINUE

         TMP2(IP,JP)=+1.0

  112    IM = 1
         IF (IP-MM1) 113,127,127

C        CONTROL RETURNS TO STATEMENT 113 AS LONG AS THE FUNCTION IS
C        DECREASING ALONG THE LINE.  WE ARE SEEKING A POSSIBLE MINIMUM.
C
  113    IP = IP+1
         AA = AN
         IF (IP .EQ. MM1) GO TO 116
         AN = DAT(IP+1,JP,IIN1)
         IF (AN .EQ. BDVAL) GO TO 125
         IF (AA-AN) 116,115,114
  114    IM = IM+1
         GO TO 113
  115    IM = 0
         GO TO 113

C        FUNCTION INCREASED - TEST FOR MINIMUM ON THE LINE.
C
  116    IF (IM .GE. MN) GO TO 118
         IS = MAX0(1,IP-MN)
         IT = IP-IM-1
         IF (IS .GT. IT) GO TO 118
         DO 117 II=IS,IT
            IF (AA .GE. DAT(II,JP,IIN1)) GO TO 124
  117    CONTINUE
  118    IS = IP+2
         IT = MIN0(M,IP+MN)
         IF (IS .GT. IT) GO TO 121
         DO 120 II=IS,IT
            IF (DAT(II,JP,IIN1) .NE. BDVAL) GO TO 119
            IP = II-1
            GO TO 125
  119       IF (AA .GE. DAT(II,JP,IIN1)) GO TO 124
  120    CONTINUE

C        MINIMUM ON THE LINE. DO TWO-DIMENSIONAL TEST FOR MINIMUM OF
C        THE FIELD.  IF A 2D MINIMUM IS VERIFIED, STORE (-1) IN OUTPUT.
C
  121    JS = MAX0(1,JP-NM)
         JT = MIN0(N,JP+NM)
         IS = MAX0(1,IP-MN)
         IT = MIN0(M,IP+MN)
         DO 123 JK=JS,JT
            IF (JK .EQ. JP) GO TO 123
            DO 122 IK=IS,IT
              IF (DAT(IK,JK,IIN1) .LE. AA .OR.
     +            DAT(IK,JK,IIN1) .EQ. BDVAL) GO TO 124
  122       CONTINUE
  123    CONTINUE

         TMP2(IP,JP)=-1.0

  124    IM = 1
         IF (IP-MM1) 101,127,127

C        SKIP BAD DATA VALUES (BDVAL) ALONG THE LINE
C
  125    IM = 0
  126    IP = IP+1
         IF (IP .GE. MM1) GO TO 127
         IF (DAT(IP+1,JP,IIN1) .EQ. BDVAL) GO TO 125
         IM = IM+1
         IF (IM .LE. MN) GO TO 126
         IM = 1
         AN = DAT(IP+1,JP,IIN1)
         IF (DAT(IP,JP,IIN1)-AN) 101,103,113
C
  127 CONTINUE

C     MOVE THE TEMPORARY OUTPUT INTO PERMANENT OUTPUT.
C     MAKE SURE EXTREMA ARE WITHIN THE PLOTTING WINDOW.
C
      NMX=0
      NMN=0
      DO 150 J=1,NANG
         IF(ITPOLD.EQ.3)THEN
            SINA=SIN(ELA(J,1)*TORAD)
            COSA=COS(ELA(J,1)*TORAD)
            SINE=SIN(AZA(J,1)*TORAD)
            COSE=COS(AZA(J,1)*TORAD)
         ELSE
            SINA=SIN(AZA(J,1)*TORAD)
            COSA=COS(AZA(J,1)*TORAD)
            SINE=SIN(ELA(J,1)*TORAD)
            COSE=COS(ELA(J,1)*TORAD)
         END IF
         DO 140 I=MNGATE,MXGATE
            RNG=R0+(I-1)*DROLD
            HRNG=RNG*COSE
            X=X0+HRNG*SINA
            Y=Y0+HRNG*COSA
            Z=H0+RNG*SINE+0.5*HRNG*HRNG*REI
            IF(ITPOLD.EQ.3)THEN
               IF(HRNG.GT.GXMN .AND. HRNG.LT.GXMX .AND.
     +            Z   .GT.GYMN .AND. Z   .LT.GYMX)THEN
                  IF(TMP2(I,J).EQ.+1.0)NMX=NMX+1
                  IF(TMP2(I,J).EQ.-1.0)NMN=NMN+1
               END IF
            ELSE
               IF(X   .GT.GXMN .AND. X   .LT.GXMX .AND.
     +            Y   .GT.GYMN .AND. Y   .LT.GYMX)THEN
                  IF(TMP2(I,J).EQ.+1.0)NMX=NMX+1
                  IF(TMP2(I,J).EQ.-1.0)NMN=NMN+1
               END IF
            END IF
            DAT(I,J,IOUT)=TMP2(I,J)
  140    CONTINUE
  150 CONTINUE
      WRITE(6,1772)IOUT,NAMFLD(IOUT),NMN,NMX
1772  FORMAT(1X,'IOUT,NAMFLD=',I6,2X,A8,
     +          ': NUMBERS OF MINIMA AND MAXIMA=',2I6)
      RETURN
      END
