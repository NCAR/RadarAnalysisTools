c
c----------------------------------------------------------------------X
c
      SUBROUTINE VAD(IOUT,IIN1,NIN2,C1,C2,C3,C4,NPRNT,NAMDBZ,X0,Y0,H0)
C
C  FUNCTION - COMPUTE MEAN RADIAL VELOCITY USING VAD ANALYSIS
C             F(I,J,OUT)=A0*A(1)*COS(A)*A(2)*COS(2*A)
C                          +B(1)*SIN(A)+B(2)*SIN(2*A)
C
C     DAT    - I/O data array in COMMON/DATA/DAT(MXR,MXA,MXF)
C     IOUT   - OUTPUT FIELD NUMBER (CONTAINS THE VAD ANALYTIC WINDS)
C     IIN1   -  INPUT   "      "   FOR RADIAL VELOCITY
C     IIN2   -  INPUT   "      "   FOR DBZ
C     NIN2   - TYPE OF OUTPUT ('FIT', 'RESD', 'MEASff.f')
C              FIT      - OUTPUT IS THE RADIAL VELOCITY FROM VAD FIT
C              RESD     - VR(IN) - VR(VAD)
C              MEASff.f - VR(IN), ONLY IF ABS(RESD) < ff.f
C     C1     - MINIMUM NUMBER OF GOOD DATA POINTS FOR VAD ANALYSIS
C     C2     - MAXIMUM ALLOWED AZIMUTH GAP         "   "      "
C     C3     -    "       "    RMS DIFFERENCE BETWEEN INPUT AND VAD WINDS
C     C4     - ORDER OF FIT [LINEAR INCLUDES A(1), A(2), B(1), B(2)]
C     NPRNT  - PRINT FLAG FOR VAD WINDS ('    ') NO, ('PRNT') YES,
C              ('FILE') YES and COEFFICIENTS TO ASCII FILE (fort.99).
C     NAMDBZ - Name of DBZ field to be averaged around an azimuth circle.
C     X0,Y0,H0 - Coordinates of the radar
C
C  VAD MEAN OUTPUT QUANTITIES STORED IN COMMON/VADWINDS/:
C     U0,V0  - HORIZONTAL WINDS       FOR THE ITH RANGE GATE
C     SPD    -     "      WIND SPEED   "   "   "    "     "
C     DIR    -     "       "   DIREC   "   "   "    "     "
C     CON    -     "      CONVERGENCE  "   "   "    "     "
C     WVD    - VERTICAL WIND (CON)     "   "   "    "     "
C     STR    - STRETCHING DEFORMATION  "   "   "    "     "
C     SHR    - SHEARING        "       "   "   "    "     "
C     ERR    - RMS DIFFERENCE BETWEEN FOURIER FIT AND INPUT RADIAL VEL
C     DBZ    - MEAN REFLECTIVITY FACTOR FOR THE ITH RANGE GATE
C     U_VD   - AMOUNT TO SUBTRACT FROM U-COMPONENT
C     V_VD   -    "    "     "      "  V    "
C     AZMVD  - AZIMUTH OF POSITIVE U DIRECTION
C     IFLVAD - FIELD INDEX FROM NAMFLD TO BE ASSOCIATED WITH VAD FIELD
C              NAMVD, WHERE NAMVD IS SUBSET OF NAMFLD.
C
      INCLUDE 'dim.inc'
      INCLUDE 'data.inc'
      INCLUDE 'input.inc'
      INCLUDE 'swth.inc'
      INCLUDE 'vadwinds.inc'

      PARAMETER (MXFC=7)

      COMMON /INPUTCH/NAMFLD(MXF),IRATYP,ICORD
      CHARACTER*8 NAMFLD,IRATYP,ICORD
      COMMON/SCRATCH/TMP1(MXR),TMP2(MXR,MXA)

      DATA RE,REI/17000.0,1.17647E-04/
      DATA TORAD,TODEG/0.017453293,57.29577951/
      DATA CNT0,GAP0,RMS0/15.0,30.0,999.9/
      DATA EPS/0.1/
      LOGICAL PLTSW
      CHARACTER*8 NIN2,NPRNT,AVTYP,NAMDBZ
      CHARACTER*4 TYPOUT
      DIMENSION A(MXFC),B(MXFC)

      CHARACTER*8 AVNAM
      DATA AVNAM/'??????? '/

      IF(FXOLD.GT.60.0)THEN
         WRITE(6,5)FXOLD
 5       FORMAT(1X,'*** CANNOT DO VAD ANALYSIS: E> ',F6.2,' DEG ***')
         RETURN
      END IF

C  FIND INDEX FOR REFLECTIVITY FACTOR TO BE AVERAGED
C
      IIN2=IFIND(NAMDBZ,NAMFLD,MXF)

C  FIND VAD-FIELD INDEX FOR THE CURRENT OUTPUT FIELD NAME
C
      KVD=IFIND(NAMFLD(IOUT),NAMVD,MXVD)

      IF(C1.GT.0.0)THEN
         CNTMN=C1
      ELSE
         CNTMN=CNT0
      END IF
      IF(C2.GT.0.0)THEN
         TGAP=C2
      ELSE
         TGAP=GAP0
      END IF
      IF(C3.GT.0.0)THEN
         RMSMX=C3
      ELSE
         RMSMX=RMS0
      END IF
      IF(C4.GT.0.0)THEN
         KFIT=MIN0(MXFC,INT(C4))
      ELSE
         KFIT=2
      END IF
      READ(NIN2,7)TYPOUT,DIFMX
 7    FORMAT(A4,F4.0)
      IF(DIFMX.EQ.0.0)DIFMX=VNYQ

      SINE=SIN(TORAD*FXOLD)
      COSE=COS(TORAD*FXOLD)
      SINA=SIN(TORAD*AZMVD(KVD))
      COSA=COS(TORAD*AZMVD(KVD))

      MING=MAX0(MNGATE,1)
      MAXG=MIN0(MXGATE,MXG,MXR)

C     Initialize all VAD variables to bad data value
C
      DO 10 I=1,MAXG
         U0(I,KVD) =BDVAL
         V0(I,KVD) =BDVAL
         SPD(I,KVD)=BDVAL
         DIR(I,KVD)=BDVAL
         CON(I,KVD)=BDVAL
         WVD(I,KVD)=BDVAL
         STR(I,KVD)=BDVAL
         SHR(I,KVD)=BDVAL
         ERR(I,KVD)=BDVAL
         DBZ(I,KVD)=BDVAL
         AVAD0(I,KVD)=BDVAL
         DO K=1,2
            AVAD(I,KVD,K)=BDVAL
            BVAD(I,KVD,K)=BDVAL
         END DO
 10   CONTINUE
      WVD(MNGATE,KVD)=0.0

C     COMPUTE AVERAGE OR INTEGRAL THROUGH CURRENT SWEEP
C
      IF(IFLD(IIN1).LT.0)THEN
         ISW=2
         PLTSW=.TRUE.
         GSPC=DRSW
         IFLD(IOUT)=-1
      ELSE
         ISW=1
         PLTSW=.FALSE.
         GSPC=DROLD
         IF(NAMFLD(IOUT).EQ.NAMFLD(IIN1))THEN
            IFLD(IOUT)=IFLD(IIN1)
         ELSE
            IFLD(IOUT)=0
         END IF
      END IF
      AVTYP='SNGLSWP '
      ITIM1=IFTIME
      ITIM2=ITIME
      WRITE(*,*)"VAD: ",NAMFLD(IOUT),NAMFLD(IIN1),PLTSW,NPRNT,NIN2,GSPC

      IFL=IIN1
      IFLVAD(KVD)=IOUT
      IF(IFLD(IFL).EQ.-5.OR.IFLD(IFL).EQ.-6)THEN
         CALL AVRAGE(DAT,MXR,MXA,MXF,BDVAL,MNGATE,MXGATE,NANG,
     X        NAMFLD,IFLD,IFL,AVNAM)
         AVTYP='AVERAGE '
         ITIM1=ITIME1
         ITIM2=ITIME2
      END IF

      IF(NPRNT.EQ.'FILE')THEN
         CALL LABELFL(PLTSW)
         WRITE(99,13)MSCAN,AVTYP,ITIM1,ITIM2,
     +        NAMFLD(IIN1),IIN1,IFLD(IIN1),
     +        NAMFLD(IOUT),IOUT,IFLD(IOUT)
 13      FORMAT(2X,'SCAN #',I3,2X,A8,I6.6,'-',I6.6,
     +          2X,'VAD  (NAME,INDEX,TYPE):  IN=',A8,2I4,
     +             ' OUT=',A8,2I4,' *VAD*')
         WRITE(99,15)
 15      FORMAT(10X,'R    Z       A0      A1      A2      B1      B2  ',
     +              '    U0      V0      SPD     DIR     CON     STR  ',
     +              '   SHR     ERR     DBZ')
      END IF

C     Copy all radial velocities into TMP2 array (Range x Azimuth).
C
      DO I=MING,MAXG
         DO J=1,NANG(ISW)
            TMP2(I,J)=DAT(I,J,IIN1)
         END DO
      END DO

C     Outer-loop (100) over ranges, inner-loop (90) over azimuths.
C
      DO 100 I=MING,MAXG

         IF(RNG(I,ISW).LE.EPS)GO TO 100
c         HRNG=RNG(I,ISW)*COSE
c         Z=H0+RNG(I,ISW)*SINE+0.5*HRNG*HRNG*REI
         Z=H0+RNG(I,ISW)*SINE

C     Initialize all variables for this range 
C     before looping around an azimuthal circle.
C
         IF(KVD.EQ.1)THEN
            SUMDBZ=0.0
            CNTDBZ=0.0
         ELSE
            SUMDBZ=BDVAL
         END IF

C     Variables for Fourier series
C
         A0=0.0
         DO K=1,MXFC
            A(K)=0.0
            B(K)=0.0
         END DO
         CNT=0.0
         CNTDBZ=0.0
         GAPMX=-999.0
         GAPMN=999.0
         ALFT=BDVAL

C        Inner-loop over azimuth angles.  Calculate the Fourier 
C        coefficients for ZEROth, and First through Kth harmonics
C        at the current range gate [RNG(I,ISW)].
C
         DO 90 J=1,NANG(ISW)
            ANG=AZA(J,ISW)
C            IF(ANG.LT.0.0)ANG=ANG+360.0
            ANGR=ANG*TORAD
c            SINAZ=SIN(ANGR)
c            COSAZ=COS(ANGR)
c            X=X0+HRNG*SINAZ
c            Y=Y0+HRNG*COSAZ
            IF(TMP2(I,J).NE.BDVAL)THEN
               IF(KVD.EQ.1 .AND. IIN2.GT.0 .AND. 
     X            DAT(I,J,IIN2) .NE. BDVAL)THEN
                  SUMDBZ=SUMDBZ+DAT(I,J,IIN2)
                  CNTDBZ=CNTDBZ+1.0
               END IF
               A0=A0+TMP2(I,J)
               DO K=1,KFIT
                  A(K)=A(K)+TMP2(I,J)*COS(ANGR*K)
                  B(K)=B(K)+TMP2(I,J)*SIN(ANGR*K)
               END DO
               CNT=CNT+1.0
               IF(ALFT.EQ.BDVAL)THEN
                  ALFT=ANG
               ELSE
                  GAP=ABS(ANG-ALFT)
                  ALFT=ANG
                  IF(GAP.GT.180.0)GAP=ABS(GAP-360.0)
                  IF(GAP.LT.GAPMN)GAPMN=GAP
                  IF(GAP.GT.GAPMX)GAPMX=GAP
               END IF
            END IF
 90      CONTINUE

C     FROM FOURIER COEFFICIENTS:  CALCULATE THE VAD MEAN PARAMETERS
C     AND VAD ANALYTIC WINDS FOR THIS RANGE, THEN GO ON TO NEXT RANGE
C     
         IF(CNT.GE.CNTMN.AND.GAPMX.LE.TGAP)THEN
         
            IF(KVD.EQ.1)THEN
               IF(CNTDBZ.NE.0.0)THEN
                  DBZ(I,KVD)=SUMDBZ/CNTDBZ
               ELSE
                  DBZ(I,KVD)=BDVAL
               END IF
            ELSE
               DBZ(I,KVD)=DBZ(I,1)
            END IF
            A0=A0/CNT
            AVAD0(I,KVD)=A0
            DO K=1,KFIT
               A(K)=2.0*A(K)/CNT
               B(K)=2.0*B(K)/CNT
               IF(K.LE.2)THEN
                  AVAD(I,KVD,K)=A(K)
                  BVAD(I,KVD,K)=B(K)
               END IF
            END DO
            
            UMN=(B(1)/COSE)-U_VD(KVD)
            VMN=(A(1)/COSE)-V_VD(KVD)
            U0(I,KVD)= UMN*SINA + VMN*COSA
            V0(I,KVD)=-UMN*COSA + VMN*SINA
            SPD(I,KVD)=SQRT(U0(I,KVD)*U0(I,KVD)+V0(I,KVD)*V0(I,KVD))
            IF(V0(I,KVD).EQ.0.0.AND.U0(I,KVD).EQ.0.0)THEN
               DIR(I,KVD)=180.0
            ELSE IF(V0(I,KVD).EQ.0.0.AND.U0(I,KVD).GT.0.0)THEN
               DIR(I,KVD)=90.0
            ELSE IF(V0(I,KVD).EQ.0.0.AND.U0(I,KVD).LT.0.0)THEN
               DIR(I,KVD)=270.0
            ELSE
               DIR(I,KVD)=TODEG*ATAN2(U0(I,KVD),V0(I,KVD))
               IF(DIR(I,KVD).LT.0.0)DIR(I,KVD)=DIR(I,KVD)+360.0
            END IF
            DIR(I,KVD)=DIR(I,KVD)+180.0
            IF(DIR(I,KVD).GE.360.0)DIR(I,KVD)=DIR(I,KVD)-360.0
            CON(I,KVD)=-2.0*A0/(RNG(I,ISW)*COSE*COSE)
            IF(I.GT.MNGATE)THEN
               WVD(I,KVD)=WVD(I-1,KVD)
     +                   +0.5*GSPC*SINE*(CON(I,KVD)+CON(I-1,KVD))
            END IF
            STR(I,KVD)=-2.0*A(2)/(RNG(I,ISW)*COSE*COSE)
            SHR(I,KVD)= 2.0*B(2)/(RNG(I,ISW)*COSE*COSE)

            SUMSQDIF=0.0
            CNTDIF=0.0
            DO 92 J=1,NANG(ISW)
               ANG=AZA(J,ISW)
C               IF(ANG.LT.0.0)ANG=ANG+360.0
               ANGR=ANG*TORAD
               VRVAD=A0
               DO K=1,KFIT
                  VRVAD=VRVAD+A(K)*COS(ANGR*K)+B(K)*SIN(ANGR*K)
               END DO
               
               VRINP=TMP2(I,J)
               IF(VRINP.NE.BDVAL)THEN
                  CNTDIF=CNTDIF+1.0
                  VRDIF=VRINP-VRVAD
                  SUMSQDIF=SUMSQDIF+VRDIF*VRDIF
               ELSE
                  VRDIF=BDVAL
               END IF
               
               IF(TYPOUT.EQ.'FIT ')THEN
                  DAT(I,J,IOUT)=VRVAD
               ELSE IF(TYPOUT.EQ.'RESD')THEN
                  DAT(I,J,IOUT)=VRDIF
               ELSE IF(TYPOUT.EQ.'MEAS')THEN
                  IF(ABS(VRDIF).LE.DIFMX)THEN
                     DAT(I,J,IOUT)=VRINP
                  ELSE
                     DAT(I,J,IOUT)=BDVAL
                  END IF
               ELSE
                  DAT(I,J,IOUT)=VRVAD
               END IF

 92         CONTINUE

C           CHECK RMS DIFFERENCE BETWEEN VAD AND INPUT WINDS.
C           IF BIGGER THAN RMSMX=C3, THEN SET VAD WINDS TO BDVAL.
C
            IF(CNTDIF.GT.CNTMN)THEN
               RMSDIF=SQRT(SUMSQDIF/CNTDIF)
               ERR(I,KVD)=RMSDIF
            ELSE
               ERR(I,KVD)=BDVAL
            END IF
            IF(RMSDIF.GT.RMSMX)THEN
               U0(I,KVD) =BDVAL
               V0(I,KVD) =BDVAL
               DIR(I,KVD)=BDVAL
               SPD(I,KVD)=BDVAL
               CON(I,KVD)=BDVAL
               WVD(I,KVD)=BDVAL
               STR(I,KVD)=BDVAL
               SHR(I,KVD)=BDVAL
               DBZ(I,KVD)=BDVAL
               DO J=1,NANG(ISW)
                  DAT(I,J,IOUT)=BDVAL
               END DO
            END IF
         ELSE
            U0(I,KVD) =BDVAL
            V0(I,KVD) =BDVAL
            DIR(I,KVD)=BDVAL
            SPD(I,KVD)=BDVAL
            CON(I,KVD)=BDVAL
            WVD(I,KVD)=BDVAL
            STR(I,KVD)=BDVAL
            SHR(I,KVD)=BDVAL
            ERR(I,KVD)=BDVAL
            DBZ(I,KVD)=BDVAL
            DO J=1,NANG(ISW)
               DAT(I,J,IOUT)=BDVAL
            END DO
            A0=BDVAL
            AVAD0(I,KVD)=BDVAL
            DO K=1,KFIT
               A(K)=BDVAL
               B(K)=BDVAL
               IF(K.LE.2)THEN
                  AVAD(I,KVD,K)=BDVAL
                  BVAD(I,KVD,K)=BDVAL
               END IF
            END DO
         END IF
         
 100  CONTINUE
      
C     LINEARLY INTERPOLATE TO FILL MISSING GATES
C
      DO 110 I=1,MAXG
         Z=H0+RNG(I,ISW)*SINE
         IF(I.EQ.1.OR.I.EQ.MAXG)GO TO 102
         IL=I-1
         IR=I+1
         IF(U0( I,KVD).EQ.BDVAL.AND.
     +      U0(IL,KVD).NE.BDVAL.AND.
     +      U0(IR,KVD).NE.BDVAL)THEN
            U0(I,KVD) =0.5*(U0(IL,KVD)+U0(IR,KVD))
            V0(I,KVD) =0.5*(V0(IL,KVD)+V0(IR,KVD))
            SPD(I,KVD)=0.5*(SPD(IL,KVD)+SPD(IR,KVD))
            IF((DIR(IL,KVD)-DIR(IR,KVD)).GT.180.0)THEN
               DIR(IR,KVD)=DIR(IR,KVD)+360.0
            ELSE IF ((DIR(IR,KVD)-DIR(IL,KVD)).GT.180.0)THEN
               DIR(IL,KVD)=DIR(IL,KVD)+360.0
            END IF
            DIR(I,KVD)=0.5*(DIR(IL,KVD)+DIR(IR,KVD))
            IF(DIR(I,KVD).GT.360.0)DIR(I,KVD)=DIR(I,KVD)-360.0
            CON(I,KVD)=0.5*(CON(IL,KVD)+CON(IR,KVD))
            WVD(I,KVD)=0.5*(WVD(IL,KVD)+WVD(IR,KVD))
            STR(I,KVD)=0.5*(STR(IL,KVD)+STR(IR,KVD))
            SHR(I,KVD)=0.5*(SHR(IL,KVD)+SHR(IR,KVD))
            ERR(I,KVD)=0.5*(ERR(IL,KVD)+ERR(IR,KVD))
            DBZ(I,KVD)=0.5*(DBZ(IL,KVD)+DBZ(IR,KVD))
         END IF
         IF(AVAD0( I,KVD).EQ.BDVAL.AND.
     +      AVAD0(IL,KVD).NE.BDVAL.AND.
     +      AVAD0(IR,KVD).NE.BDVAL)THEN
            AVAD0(I,KVD)=0.5*(AVAD0(IL,KVD)+AVAD0(IR,KVD))
            DO K=1,2
               AVAD(I,KVD,K)=0.5*(AVAD(IL,KVD,K)+AVAD(IR,KVD,K))
               BVAD(I,KVD,K)=0.5*(BVAD(IL,KVD,K)+BVAD(IR,KVD,K))
            END DO
         END IF

 102     CONTINUE
         IF(U0(I,KVD).NE.BDVAL)THEN
            IF(NPRNT.EQ.'PRNT'.OR.NPRNT.EQ.'FILE')THEN
               WRITE(6,103)I,RNG(I,ISW),Z,U0(I,KVD),
     +              V0(I,KVD),SPD(I,KVD),DIR(I,KVD),CON(I,KVD),
     +              STR(I,KVD),SHR(I,KVD),ERR(I,KVD),DBZ(I,KVD)
 103           FORMAT(1X,'    IRZ=',I4,2F8.3,'  UVSD=',4F8.2,
     +              '  CTH=',3F8.2,' ERR=',F8.2,' DBZ=',F8.2)
            END IF
            IF(NPRNT.EQ.'FILE')THEN
               WRITE(99,105)KVD,I,RNG(I,ISW),Z,AVAD0(I,KVD),
     +              AVAD(I,KVD,1),AVAD(I,KVD,2),BVAD(I,KVD,1),
     +              BVAD(I,KVD,2),U0(I,KVD),V0(I,KVD),SPD(I,KVD),
     +              DIR(I,KVD),CON(I,KVD),STR(I,KVD),SHR(I,KVD),
     +              ERR(I,KVD),DBZ(I,KVD)
 105           FORMAT('I=',I2,I3,F6.2,F6.3,14F8.2)
            END IF
         END IF

 110  CONTINUE

C     RESTORE AVERAGE ACCUMULATORS
C
      IF(IFLD(IFL).EQ.-5.OR.IFLD(IFL).EQ.-6)THEN
         CALL UNAVRAGE(DAT,MXR,MXA,MXF,BDVAL,MNGATE,MXGATE,NANG,
     X        NAMFLD,IFLD,IFL,AVNAM)
      END IF

      RETURN
      END
