      SUBROUTINE LAPSOL(F,G,P,RH,WK,IOCT,IDIM,JDIM,DXKM,DYKM,
     X                  EPS,ITMX,BAD,ITER,TOL,NST)
C
C        LAPLACIAN SOLVER- APPLIED PRIMARILY TO THE RETRIEVAL OF PRESSURE
C                          FIELDS.
C
      DIMENSION F(IDIM,JDIM),G(IDIM,JDIM),P(IDIM,JDIM),
     X          RH(IDIM,JDIM),WK(IDIM,JDIM),IOCT(IDIM,JDIM)
      LOGICAL A1,A2,A3,A4,INNER,EXTXL,EXTXR,EXTYL,EXTYR,
     X        CORN1,CORN2,CORN3,CORN4
      DATA OMEG/1.82/
C
C   DEFINE STATEMENT FUNCTIONS FOR THE LOGICAL VARIABLES:
C
      INNER(II,JJ) = ICEDAND(IOCT(II,JJ),1).NE.0
      EXTXL(II,JJ) = ICEDAND(IOCT(II,JJ),2).NE.0
      EXTXR(II,JJ) = ICEDAND(IOCT(II,JJ),4).NE.0
      EXTYL(II,JJ) = ICEDAND(IOCT(II,JJ),8).NE.0
      EXTYR(II,JJ) = ICEDAND(IOCT(II,JJ),16).NE.0
      CORN1(II,JJ) = ICEDAND(IOCT(II,JJ),32).NE.0
      CORN2(II,JJ) = ICEDAND(IOCT(II,JJ),64).NE.0
      CORN3(II,JJ) = ICEDAND(IOCT(II,JJ),128).NE.0
      CORN4(II,JJ) = ICEDAND(IOCT(II,JJ),256).NE.0
C
 1    CONTINUE
      DX = -DXKM
      DY = -DYKM
      DXI = 1./DX
      DYI = 1./DY
C
C    DEFINE CONSTANTS FOR PRESSURE ITERATIONS:
C
      DENOM=2.*(DX*DX+DY*DY)
      TETX=DY*DY/DENOM
      TETY=DX*DX/DENOM
      DELT2=DX*DX*DY*DY/DENOM
      ITER=0
      TOL=0.0
C
      NPXY = IDIM * JDIM
CINITIALIZE THE ARRAY IOCT WITH 0'S FOR NPXY
      CALL CONFLD(IOCT,NPXY,0)
      IDIM1 = IDIM - 1
      JDIM1 = JDIM - 1
C
C   DEFINE BOUNDARY AND INTERNAL POINTS:
C
      DO 2 J=2,JDIM1
      DO 2 I=2,IDIM1
C
      A1=F(I+1,J).NE.BAD
      A2=F(I,J).NE.BAD
      A3=G(I,J+1).NE.BAD
      A4=G(I,J).NE.BAD
      IOCT(I,J)=INT(CVMGT(1.,0.,A1.AND.A2.AND.A3.AND.A4))
 2    CONTINUE
      DO 3 I = 1,IDIM
      IM1=MAX0(I-1,1)
      IP1=MIN0(I+1,IDIM)
      DO 3 J = 1,JDIM
      JM1=MAX0(J-1,1)
      JP1=MIN0(J+1,JDIM)
      L1=INT(CVMGT(2.0,0.0,(.NOT.(INNER(I,J))).AND.(INNER(IP1,J))))
      L2=INT(CVMGT(4.0,0.0,(.NOT.(INNER(I,J))).AND.(INNER(IM1,J))))
      L3=INT(CVMGT(8.0,0.0,(.NOT.(INNER(I,J))).AND.(INNER(I,JP1))))
      L4=INT(CVMGT(16.0,0.0,(.NOT.(INNER(I,J))).AND.(INNER(I,JM1))))
      IOCT(I,J) = IOCT(I,J)+L1+L2+L3+L4
C
C    DEFINE CORNERS:
C
      IF (EXTXL(I,J).AND.EXTYL(I,J)) THEN
         IOCT(I,J)=32
      ENDIF
C
      IF (EXTXL(I,J).AND.EXTYR(I,J)) THEN
         IOCT(I,J)=64
      ENDIF
C
      IF (EXTXR(I,J).AND.EXTYL(I,J)) THEN
         IOCT(I,J)=128
      ENDIF
C
      IF (EXTXR(I,J).AND.EXTYR(I,J)) THEN
         IOCT(I,J)=256
      ENDIF
C
 3    CONTINUE
C
C   DEFINE RIGHT-HAND SIDE OF PRESSURE EQUATION:
C
C
      DO 4 I=1,IDIM
      DO 4 J=1,JDIM
C
      P(I,J) = 0.0
      WK(I,J) = 0.0
      RH(I,J) = BAD
C
      IF (INNER(I,J)) RH(I,J) = - ((F(I+1,J)-F(I,J))*DXI
     X                            +(G(I,J+1)-G(I,J))*DYI)
 4    CONTINUE
C
C    BEGIN PRESSURE ITERATIONS:
C
 5    CONTINUE
      ITER=ITER+1
      IF (ITER.GE.ITMX) GO TO 92
      KI=MOD(ITER,10)
      IF (KI.EQ.0) CALL COPRX(WK,P,NPXY)
C
      DO 6 I=1,IDIM
      DO 6 J=1,JDIM
      IF (INNER(I,J)) THEN
C  THIS IS AN INTERIOR POINT
         P(I,J)=(TETX*(P(I+1,J)+P(I-1,J))+TETY*
     X  (P(I,J+1)+P(I,J-1))-DELT2*RH(I,J))*OMEG+(1.-OMEG)*P(I,J)
      ELSE IF (EXTXL(I,J)) THEN
C  THIS IS A LEFT EDGE BOUNDARY POINT
         P(I,J)=(P(I+1,J)+DX*F(I+1,J))*OMEG+(1.-OMEG)*P(I,J)
      ELSE IF (EXTXR(I,J)) THEN
C  THIS IS A RIGHT-EDGE BOUNDARY POINT
         P(I,J)=(P(I-1,J)-DX*F(I,J))*OMEG+(1.-OMEG)*P(I,J)
      ELSE IF (EXTYL(I,J)) THEN
C  THIS IS A BOTTOM EDGE BOUNDARY POINT
         P(I,J)=(P(I,J+1)+DY*G(I,J+1))*OMEG+(1.-OMEG)*P(I,J)
      ELSE IF (EXTYR(I,J)) THEN
C  THIS IS A TOP EDGE BOUNDARY POINT
         P(I,J)=(P(I,J-1)-DY*G(I,J))*OMEG+(1.-OMEG)*P(I,J)
      ELSE IF (CORN1(I,J)) THEN
C  THIS IS A LOWER LEFT CORNER POINT
         P(I,J)=0.5*(P(I+1,J)+DX*F(I+1,J)+P(I,J+1)+DY*G(I,J+1))*
     X          OMEG+(1.-OMEG)*P(I,J)
      ELSE IF (CORN2(I,J)) THEN
C  THIS IS AN UPPER LEFT CORNER POINT
         P(I,J)=0.5*(P(I+1,J)+DX*F(I+1,J)+P(I,J-1)-DY*G(I,J))*
     X          OMEG+(1.-OMEG)*P(I,J)
      ELSE IF (CORN3(I,J)) THEN
C  THIS IS A LOWER RIGHT CORNER POINT
         P(I,J)=0.5*(P(I-1,J)-DX*F(I,J)+P(I,J+1)+DY*G(I,J+1))*
     X          OMEG+(1.-OMEG)*P(I,J)
      ELSE IF (CORN4(I,J)) THEN
C  THIS IS AN UPPER RIGHT CORNER POINT
         P(I,J)=0.5*(P(I-1,J)-DX*F(I,J)+P(I,J-1)-DY*G(I,J))*
     X          OMEG+(1.-OMEG)*P(I,J)
      ELSE
C
C   THIS IS A TOTALLY EXTERIOR POINT--FLAG IT:
C
         P(I,J)=BAD
C
      ENDIF
C
 6    CONTINUE
C
C     REMOVE PLANAR MEAN TO AID IN CONVERGENCE
C
      NOMT = 0
      AVET = 0.0
      DO 10 J=1,JDIM
      DO 10 I=1,IDIM
      IF (P(I,J).EQ.BAD) GO TO 10
      NOMT = NOMT + 1
      AVET = AVET + P(I,J)
10    CONTINUE
      IF (NOMT.EQ.0) GO TO 91
      AVET = AVET/NOMT
      DO 11 J=1,JDIM
      DO 11 I=1,IDIM
      IF (P(I,J).EQ.BAD) GO TO 11
      P(I,J) = P(I,J) - AVET
11    CONTINUE
C
      KI=MOD(ITER,10)
      IF (KI.NE.0) GO TO 5
C
C   CHECK CONVERGENCE EVERY 10TH ITERATION:
C
      AVE=0.
      NOM=0
      DO 8 J=1,JDIM
      DO 8 I=1,IDIM
      IF (.NOT.INNER(I,J)) GO TO 8
      NOM=NOM+1
      AVE=AVE+ABS(P(I,J))
 8    CONTINUE
      IF(NOM.EQ.0)GO TO 91
      AVE=AVE/FLOAT(NOM)
      TOL = 0.0
      DO 9 J=1,JDIM
      DO 9 I=1,IDIM
         IF (.NOT.INNER(I,J)) GO TO 9
         IF (ABS(P(I,J)).LT.0.00001.AND.ITER.GT.50) GO TO 9
         DIV = AMAX1(ABS(P(I,J)),AVE)
         TOL = AMAX1(TOL,ABS((P(I,J)-WK(I,J))/DIV))
 9    CONTINUE
C
      IF (TOL.GT.EPS) GO TO 5
C
91    CONTINUE
      NST=0
      GO TO 95
92    CONTINUE
      CALL CEDERX(566,0)
      NST=1
      GO TO 95
   95 CONTINUE
C
C +++++ FLAGGING EXTERIOR POINTS DISABLED FOR THE PRESENT +++++
C
      RETURN
C
C        FLAG ALL EXTERIOR POINTS IN THE SOLUTION
C
C      DO 96 J=1,JDIM
C      DO 96 I=1,IDIM
C         P(I,J)=CVMGT(P(I,J),BAD,INNER(I,J))
C   96 CONTINUE
C
C      RETURN
      END
